package org.sanket.codingGym.iMazeForRobot.environment;

import java.awt.Frame;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.io.FileInputStream;
import java.net.URL;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.Properties;

import org.sanket.codingGym.iMazeForRobot.data.Grid;
import org.sanket.codingGym.iMazeForRobot.data.IDrawStuff;
import org.sanket.codingGym.iMazeForRobot.data.Robot;
import org.sanket.codingGym.iMazeForRobot.data.Wall;

import maze.environment.Maze;

/**
 * @author sanket
 * 
 *         This class defines the maze structure and all graphical elements that
 *         go into it.
 *
 */
public class MazeBuilder<T extends IDrawStuff> extends Frame{
	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	private List<Wall>	walls;
	private Robot		robot;
	private Grid		grid;
	
	private List<T> elements = new ArrayList<T>();

	public MazeBuilder(Properties mazeDefinition) {
		super("ROBO MAZE");
		this.robot = new Robot(mazeDefinition);
		this.grid = new Grid(mazeDefinition);
		
		/*
		 * Build the graphics
		 */
		build();
	}


	@SuppressWarnings("unchecked")
	private void build() {
		/*walls = new ArrayList<Wall>();
		
		for(int i=0; i<walls.size(); i++){
			elements.addAll((Collection<? extends T>) walls);
		}*/		
		
		elements.add((T) robot);
		elements.add( (T)grid);
	}

	public void render(List<T> elements, Graphics2D g2) {
		for (int i = 0; i < elements.size(); i++) {
			elements.get(i).build(g2);
		}
	}
	
	public void paint(Graphics g) {
		super.paint(g);
		render(elements, (Graphics2D)g);
	}
	
	public static void main(String[] args) throws Exception{
		System.out.println("Hello to the Robo-Maze_World");
		URL url = MazeBuilder.class.getClassLoader().getResource("mazeDefinition.properties");
		FileInputStream propFile = new FileInputStream(url.getPath());
		Properties mazeProperties = new Properties();
		mazeProperties.load(propFile);

		new MazeBuilder(mazeProperties);
	}

}

package learning.solutions.advanced.matrix.domain;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.Serializable;
import java.util.Properties;

import learning.solutions.advanced.matrix.driver.MatrixCreation;

public class PortableMatrixConfig implements Serializable {

	/**
	 * 
	 */
	private static final long serialVersionUID = -2277832505186440104L;
	private Properties			matrixConfig		= null;

	public PortableMatrixConfig() {
		try {
			matrixConfig = MatrixCreation.getMatrixConfig();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	public byte[] serialize() {
		ByteArrayOutputStream byteOut = new ByteArrayOutputStream();
		try {
			ObjectOutputStream out = new ObjectOutputStream(byteOut);
			out.writeObject(this);
			return byteOut.toByteArray();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return null;
	}

	public PortableMatrixConfig deserialize(byte[] messageBytes) throws IOException, ClassNotFoundException {
		ByteArrayInputStream byteIn = new ByteArrayInputStream(messageBytes);
		ObjectInputStream objectIn = new ObjectInputStream(byteIn);
		return (PortableMatrixConfig) objectIn.readObject();
	}
	
	public Properties getMatrixConfig(){
		return matrixConfig;
	}
}

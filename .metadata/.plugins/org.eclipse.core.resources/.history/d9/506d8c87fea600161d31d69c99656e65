package org.sanket.codingGym.DataMining.algorithms.classification;

import net.sf.javaml.core.Dataset;

import java.io.File;
import java.io.IOException;
import java.util.Map;

import be.abeel.util.Pair;
import net.sf.javaml.classification.KNearestNeighbors;
import net.sf.javaml.classification.evaluation.EvaluateDataset;
import net.sf.javaml.classification.evaluation.PerformanceMeasure;
import net.sf.javaml.sampling.Sampling;
import net.sf.javaml.tools.data.FileHandler;

public class GenericClassifier {

	private Pair<Dataset, Dataset>	inputData;
	private KNearestNeighbors		knn;

	/**
	 * @param dataLocation
	 * @param numColumns
	 * @param delimiter
	 * @param numClasses
	 * @throws IOException 
	 */
	public GenericClassifier(String dataLocation, int numColumns, String delimiter, int numClasses) throws IOException {
		ClassLoader classLoader = getClass().getClassLoader();

		/* datasets/IrisDataset/iris.data */
		Dataset input = FileHandler.loadDataset(new File(classLoader.getResource(dataLocation).getFile()), numColumns,
				delimiter);

		Sampling s = Sampling.SubSampling;
		inputData = s.sample(input, (int) (0.8f * input.size()));
		this.knn = new KNearestNeighbors(numClasses);
	}

	public void buildClassifier() {
		knn.buildClassifier(inputData.x());
	}

	public void reportResults() {
		Map<Object, PerformanceMeasure> results = EvaluateDataset.testDataset(knn, inputData.y());
		System.out.println(results.entrySet());
	}
}

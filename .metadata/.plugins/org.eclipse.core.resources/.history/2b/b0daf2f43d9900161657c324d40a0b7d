package org.sanket.codingGym.MatrixLogger;

import java.io.PrintWriter;
import java.io.FileWriter;
import java.io.IOException;

/**
 * @author sanket
 * 
 *         This class is used to log program errors and exceptions along with
 *         normal operational statements.
 *
 */
public class Logger {

	public String		logFormat	= "ApplicationName,LogType,ErrorMessage";
	public String		delimiter	= ",";

	private PrintWriter	writer		= null;
	private FileWriter	fileWriter	= null;

	/**
	 * @param fileName
	 * @param delimiter
	 * @throws IOException
	 * 
	 *             This constructor initializes the fileName to be used for
	 *             storing the log statements. Note:: Actual fileName will have
	 *             System.time() appended to the end of the given string.
	 * 
	 */
	public Logger(String fileName, String delimiter) throws IOException {
		this.delimiter = delimiter;
		this.fileWriter = new FileWriter(fileName);
		this.writer = new PrintWriter(fileWriter, true);
	}

	/**
	 * @param fileName
	 * @param logFormat
	 * @param delimiter
	 * @throws IOException
	 * 
	 *             This constructor initializes the fileName to be used for
	 *             storing the log statements. Note:: Actual fileName will have
	 *             System.time() appended to the end of the given string. This
	 *             constructor allows the user to specify the log statement
	 *             format.
	 */
	public Logger(String fileName, String logFormat, String delimiter) throws IOException {
		this.logFormat = logFormat;
		this.delimiter = delimiter;

		this.fileWriter = new FileWriter(fileName);
		this.writer = new PrintWriter(fileWriter, true);
	}

	/**
	 * @param fileName
	 * @param logFormat
	 * @param delimiter
	 * @param appendToFile
	 * @throws IOException
	 * 
	 *             This constructor initializes the fileName to be used for
	 *             storing the log statements. Note:: Actual fileName will have
	 *             System.time() appended to the end of the given string. This
	 *             constructor allows the user to specify the log statement
	 *             format. This takes in a boolean to determine if the statement
	 *             is to be appended to the given file or not.
	 */
	public Logger(String fileName, String logFormat, String delimiter, boolean appendToFile) throws IOException {
		this.logFormat = logFormat;
		this.delimiter = delimiter;

		this.fileWriter = new FileWriter(fileName);
		this.writer = new PrintWriter(fileWriter, appendToFile);
	}

	/**
	 * @param logStatement
	 * @throws Exception
	 * 
	 *             Appends the logStatment at the end of the logFile this class
	 *             was asked to create.
	 */
	public void log(String logStatement) throws IOException {
		/*
		 * Perform sanity checks!
		 */
		if (logFormat.length() != logStatement.length()) {
			throw new IOException(
					"Given log statment is not consistent with the logger instance logFormat. Please give log statements in the following format ::"
							+ logFormat);
		} 
		
		/*
		 * Ensure statement is in the given format.
		 */
		String[] components = logStatement.split(delimiter);
		if(components.length != logFormat.length()){
			throw new IOException(
					"Given log statment is not consistent with the logger instance logFormat. Please give log statements in the following format ::"
							+ logFormat);
		}
		
		/*
		 * Write the statment to the file
		 */
		writer.print(logStatement);
	}

}

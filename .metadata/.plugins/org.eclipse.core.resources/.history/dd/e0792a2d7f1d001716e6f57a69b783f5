package learning.solutions.advanced.matrix.domain;

import java.awt.Frame;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Point;
import java.util.List;
import java.util.Properties;

import learning.solutions.advanced.matrix.engineeringLevel.AnimationEngine;
import learning.solutions.advanced.matrix.utils.EnvironmentUtils;
import learning.solutions.advnaced.matrix.utils.MatrixDataIllusion;

public class MatrixArchitect extends Frame {

	/**
	 * 
	 */
	private static final long	serialVersionUID	= 4198825794676956718L;
	private Properties			matrixConfig		= null;
	private List<MatrixElement>	matrix				= null;

	private void render(Graphics2D canvas) {
		/*
		 * for (MatrixElement mElement : matrix) { mElement.draw(canvas); }
		 */

		AnimationEngine.animateRobot(canvas,
				MatrixDataIllusion.generateRobotPositions(new Point(0, 0), new Point(0, 0)), 10, matrixConfig);
	}

	public void paint(Graphics g) {
		super.paint(g);
		Graphics2D canvas = (Graphics2D) g;
		render(canvas);
	}

	public MatrixArchitect(List<MatrixElement> matrix, Properties matrixDefinition) {
		super("Matrix");
		this.matrixConfig = matrixDefinition;
		this.matrix = matrix;

		int frameHeight = Integer.parseInt(this.matrixConfig.getProperty(EnvironmentUtils.FRAME_HEIGHT_PROPERTY));
		int frameWidth = Integer.parseInt(this.matrixConfig.getProperty(EnvironmentUtils.FRAME_WIDTH_PROPERTY));
		this.setSize(frameHeight, frameWidth);
		this.setVisible(true);
	}
}

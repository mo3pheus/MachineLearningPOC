package org.sanket.codingGym.DataMining.driver;

import java.io.File;

import org.sanket.codingGym.DataMining.algorithms.KMeansClusterer;
import org.sanket.codingGym.DataMining.utilities.Environment;

import net.sf.javaml.clustering.Clusterer;
import net.sf.javaml.clustering.KMeans;
import net.sf.javaml.core.Dataset;
import net.sf.javaml.tools.data.FileHandler;

public class KMeansClustererDriver {

	public static void main2(String[] args) throws Exception {
		KMeansClusterer clusterer = new KMeansClusterer(Environment.dataLocation + "//IrisDataset//iris.data", 4, ",");
		Dataset[] results = clusterer.cluster();

		int j = 1;
		for (Dataset d : results) {
			for (int i = 0; i < d.size(); i++) {
				System.out.println(
						" Class = " + j + " sampleId = " + d.get(i).getID() + " sample :: " + d.get(i).entrySet());
			}
			j++;
		}
	}
	
	/**
     * Tests the k-means algorithm with default parameter settings.
     */
    public static void main(String[] args) throws Exception {

        /* Load a dataset */
        Dataset data = FileHandler.loadDataset(new File(Environment.dataLocation + "//IrisDataset//iris.data), 4, ",");
        /*
         * Create a new instance of the KMeans algorithm, with no options
         * specified. By default this will generate 4 clusters.
         */
        Clusterer km = new KMeans();
        /*
         * Cluster the data, it will be returned as an array of data sets, with
         * each dataset representing a cluster
         */
        Dataset[] clusters = km.cluster(data);
        System.out.println("Cluster count: " + clusters.length);

    }
}

package learning.solutions.advanced.matrix.engineeringLevel;

import java.awt.Graphics2D;
import java.awt.Point;
import java.util.ArrayList;
import java.util.List;
import java.util.Properties;

import learning.solutions.advanced.matrix.domain.BlankSlate;
import learning.solutions.advanced.matrix.domain.Cell;
import learning.solutions.advanced.matrix.domain.Grid;
import learning.solutions.advanced.matrix.domain.MatrixElement;
import learning.solutions.advanced.matrix.domain.Robot;
import learning.solutions.advanced.matrix.domain.WallBuilder;

public class AnimationEngine {
	public static void animate(List<MatrixElement> elements, Graphics2D canvas, List<Point> positions, int robotIndex,
			int cellWidth) throws Exception {
		Robot robot = (Robot) elements.get(robotIndex);

		for (int j = 0; j < positions.size(); j++) {
			Point currentLocation = robot.getLocation();
			for (int i = 0; i < elements.size(); i++) {
				if (i != robotIndex) {
					elements.get(i).draw(canvas);
				}
			}
			robot.draw(canvas);
			robot.setLocation(positions.get(j));
			Thread.sleep(25);
			if (j != positions.size() - 1) {
				canvas.clearRect(currentLocation.x, currentLocation.y, cellWidth, cellWidth);
			}
		}
	}
	
	public static void animateRobot(Graphics2D canvas, List<Point> positions, int cellWidth, Properties matrixConfig) {
		for(int i = 0; i < positions.size(); i++){
			List<MatrixElement> matrixCitizens = new ArrayList<MatrixElement>();
			Point position = positions.get(i);
			Robot robot = new Robot(matrixConfig);
			robot.setLocation(position);
			Cell cell = new Cell(matrixConfig);
			Grid grid = new Grid(matrixConfig);
			WallBuilder wallBuilder = new WallBuilder(matrixConfig);
			matrixCitizens.add(grid);
			matrixCitizens.add(cell);
			matrixCitizens.add(wallBuilder);
			matrixCitizens.add(robot);
			createMatrix(matrixCitizens,canvas);
		}
	}
	
	private static void createMatrix(List<MatrixElement> matrixCitizens, Graphics2D canvas){
		for(MatrixElement mCitizen:matrixCitizens){
			mCitizen.draw(canvas);
		}
	}
}
